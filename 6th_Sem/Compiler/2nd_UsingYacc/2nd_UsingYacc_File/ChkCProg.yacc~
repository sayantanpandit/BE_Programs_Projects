%{
#include "FuncDefs.h"

extern int yylineno, yychar;

%}


%union{
    char* id;
    char* string;
}

%token <string> AUTO BREAK CASE CHAR CONST CONTINUE DEFAULT DO DOUBLE ELSE ENUM EXTERN
%token <string> FLOAT FOR GOTO IF INT LONG  REGISTER RETURN SHORT SIGNED SIZEOF STATIC STRUCT
%token <string> SWITCH TYPEDEF UNION UNSIGNED VOID VOLATILE WHILE

%token PLUS MINUS MULT DIVIDE
%token LESS LESS_EQ GREATER GREATER_EQ EQUAL NOT_EQ NOT ASSIGN PLUS_EQ MINUS_EQ MULT_EQ DIV_EQ
 
%token LEFT_PAREN RIGHT_PAREN LEFT_SQ_BRACKET RIGHT_SQ_BRACKET LEFT_CURLY RIGHT_CURLY 
%token <string> COMMA UNDERSCORE SEMICOLON CONSTANT IDENTIFIER

%type <string> variables datatype

%start program

%%

program
    : 
    | program datatype variables SEMICOLON  { printf("%s-%s\n", $3, $2); hello();/*insertToHash(count, SumOfAscii($3), $3, $2, &size, size);*/ }     
    | program error                         { /*yyerrok;*/ }
    ; 
    
datatype
    : CHAR      { printf("CHAR\t");    size = 1; }
    | DOUBLE    { printf("DOUBLE\t");  }
    | INT       { printf("INT\t");     size = 2; }
    | LONG	{ printf("LONG\t");    }
    | FLOAT 	{ printf("FLOAT\t");   }      
    ;
    
variables
    : IDENTIFIER                        { count++; printf("IDENTIFIER ::"); }
    | IDENTIFIER UNDERSCORE IDENTIFIER  { /*$$ = strcat($1,$3);*/  }
    | IDENTIFIER UNDERSCORE CONSTANT    { /*$$ = strcat($1,$3);*/  }
    | IDENTIFIER CONSTANT               {   }
    ;

%%
main()
{
    hashTable = (struct hash *)calloc(eleCount, sizeof(struct hash));
    yyparse();
    return 0;
}

yyerror(s)
char *s;
{ 
     fprintf(stderr, "%s: token %d on line %d\n", s, yychar, yylineno);
}

yywrap()
{ return 1; }
